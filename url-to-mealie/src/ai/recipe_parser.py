import json
from typing import Any
from logger import get_configured_logger

logger = get_configured_logger(__name__)


def parse_llm_response(response: str) -> dict:
    """
    Extract the JSON object from the LLM response.
    Falls back to naive parsing if JSON parsing fails.
    """
    response = response.replace("```json", "").replace("```", "")
    response = (
        response.replace("”", '"').replace("“", '"').replace("’", "'").replace("‘", "'")
    )
    logger.debug(f"Response after cleanup: {response}")

    start = response.find("{")
    end = response.rfind("}") + 1
    if start >= 0 and end > start:
        json_str = response[start:end]
        parsed = json.loads(json_str)
        logger.debug(f"Parsed loads JSON: {parsed}")

        validated = parsed  # TODO: Add validation here
        logger.debug(f"Validated JSON: {validated}")
        return validated

    raise ValueError("Invalid or empty recipe structure")


def smart_parse(llm_response: dict[str, Any]) -> dict:
    """
    Parse recipe information generated by llama.cpp server.
    """

    response_text = llm_response["choices"][0]["message"]["content"]
    parsed = parse_llm_response(response_text)

    if "recipeIngredient" not in parsed:
        parsed["recipeIngredient"] = []
    if "recipeInstructions" not in parsed:
        parsed["recipeInstructions"] = []
    if not isinstance(parsed["recipeInstructions"], list):
        parsed["recipeInstructions"] = [{"text": str(parsed["recipeInstructions"])}]
    elif not all(isinstance(x, dict) for x in parsed["recipeInstructions"]):
        parsed["recipeInstructions"] = [
            {"text": str(x)} for x in parsed["recipeInstructions"]
        ]

    return parsed


def naive_parse(text: str) -> dict:
    """
    Super simple heuristic parser:
    - Lines with numbers -> ingredients
    - Other lines -> instructions
    """
    lines = [line.strip() for line in text.split(".") if line.strip()]
    ingredients = [l for l in lines if any(char.isdigit() for char in l)]
    instructions = [l for l in lines if l not in ingredients]

    return {
        "name": "Recipe from Social Media video",
        "recipeIngredient": ingredients if ingredients else ["See transcription"],
        "recipeInstructions": [{"text": step} for step in instructions],
    }
